/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCapabilityArgs } from "./CreateCapabilityArgs";
import { UpdateCapabilityArgs } from "./UpdateCapabilityArgs";
import { DeleteCapabilityArgs } from "./DeleteCapabilityArgs";
import { CapabilityFindManyArgs } from "./CapabilityFindManyArgs";
import { CapabilityFindUniqueArgs } from "./CapabilityFindUniqueArgs";
import { Capability } from "./Capability";
import { DepartmentFindManyArgs } from "../../department/base/DepartmentFindManyArgs";
import { Department } from "../../department/base/Department";
import { CapabilityService } from "../capability.service";

@graphql.Resolver(() => Capability)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CapabilityResolverBase {
  constructor(
    protected readonly service: CapabilityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Capability",
    action: "read",
    possession: "any",
  })
  async _capabilitiesMeta(
    @graphql.Args() args: CapabilityFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Capability])
  @nestAccessControl.UseRoles({
    resource: "Capability",
    action: "read",
    possession: "any",
  })
  async capabilities(
    @graphql.Args() args: CapabilityFindManyArgs
  ): Promise<Capability[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Capability, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Capability",
    action: "read",
    possession: "own",
  })
  async capability(
    @graphql.Args() args: CapabilityFindUniqueArgs
  ): Promise<Capability | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Capability)
  @nestAccessControl.UseRoles({
    resource: "Capability",
    action: "create",
    possession: "any",
  })
  async createCapability(
    @graphql.Args() args: CreateCapabilityArgs
  ): Promise<Capability> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Capability)
  @nestAccessControl.UseRoles({
    resource: "Capability",
    action: "update",
    possession: "any",
  })
  async updateCapability(
    @graphql.Args() args: UpdateCapabilityArgs
  ): Promise<Capability | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Capability)
  @nestAccessControl.UseRoles({
    resource: "Capability",
    action: "delete",
    possession: "any",
  })
  async deleteCapability(
    @graphql.Args() args: DeleteCapabilityArgs
  ): Promise<Capability | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Department])
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "read",
    possession: "any",
  })
  async departments(
    @graphql.Parent() parent: Capability,
    @graphql.Args() args: DepartmentFindManyArgs
  ): Promise<Department[]> {
    const results = await this.service.findDepartments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
